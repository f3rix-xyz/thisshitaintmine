package sustainico_backend.Models;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.*;
import org.springframework.beans.factory.annotation.Autowired;
import sustainico_backend.rep.WaterReadingRepository;

import java.sql.Array;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Setter
@Getter
@DynamoDBTable(tableName = "home")
public class Home {

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey(attributeName = "homeId")
    private String homeId;

    @DynamoDBAttribute(attributeName = "homeName")
    private String homeName;

    @DynamoDBAttribute(attributeName = "children")
    private String children;

    @DynamoDBAttribute(attributeName = "adults")
    private String adults;

    @DynamoDBAttribute(attributeName = "addressLine1")
    private String addressLine1;

    @DynamoDBAttribute(attributeName = "addressLine2")
    private String addressLine2;

    @DynamoDBAttribute(attributeName = "pincode")
    private String pincode;

    @DynamoDBAttribute(attributeName = "city")
    private String city;

    @DynamoDBAttribute(attributeName = "state")
    private String state;

    @DynamoDBAttribute(attributeName = "area")
    private String area;

    @DynamoDBIndexHashKey(globalSecondaryIndexName = "userId-index", attributeName = "userId")
    @NonNull
    private String userId;

    @DynamoDBTypeConverted(converter = DeviceArrayListConverter.class)
    @DynamoDBAttribute(attributeName = "devices")
    private List<DeviceArray> devices;

    @DynamoDBAttribute(attributeName = "baselineUsage")
    private String baselineUsage;

    @DynamoDBAttribute(attributeName = "lastMonthUsage")
    private String lastMonthUsage;

    @DynamoDBAttribute(attributeName = "todaysUsage")
    private String todaysUsage;

    @DynamoDBAttribute(attributeName = "currentMonthUsage")
    private String currentMonthUsage;



    public void calculateBaselineUsage() {
        try {
            int numAdults = Integer.parseInt(adults);
            int numChildren = Integer.parseInt(children);
            double areaValue = Double.parseDouble(area);

            double baselineUsageValue = 120 * numAdults + 100 * numChildren + 0.05 * areaValue;
            baselineUsageValue = Math.max(baselineUsageValue, 0);


            this.baselineUsage = String.valueOf(baselineUsageValue);
        } catch (NumberFormatException e) {
            this.baselineUsage = "0";
        }
    }
}
